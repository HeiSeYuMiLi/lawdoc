/**
 *
 *  TFile.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TFile.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::lawdoc;

const std::string TFile::Cols::_id = "id";
const std::string TFile::Cols::_user_id = "user_id";
const std::string TFile::Cols::_create_time = "create_time";
const std::string TFile::Cols::_file_name = "file_name";
const std::string TFile::Cols::_file_type = "file_type";
const std::string TFile::Cols::_file_uuid = "file_uuid";
const std::string TFile::Cols::_source_file = "source_file";
const std::string TFile::primaryKeyName = "id";
const bool TFile::hasPrimaryKey = true;
const std::string TFile::tableName = "t_file";

const std::vector<typename TFile::MetaData> TFile::metaData_={
{"id","int32_t","int(11)",4,1,1,1},
{"user_id","int32_t","int(11)",4,0,0,1},
{"create_time","::trantor::Date","timestamp",0,0,0,0},
{"file_name","std::string","varchar(255)",255,0,0,1},
{"file_type","std::string","varchar(20)",20,0,0,1},
{"file_uuid","std::string","varchar(255)",255,0,0,1},
{"source_file","std::string","varchar(255)",255,0,0,0}
};
const std::string &TFile::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TFile::TFile(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["file_name"].isNull())
        {
            fileName_=std::make_shared<std::string>(r["file_name"].as<std::string>());
        }
        if(!r["file_type"].isNull())
        {
            fileType_=std::make_shared<std::string>(r["file_type"].as<std::string>());
        }
        if(!r["file_uuid"].isNull())
        {
            fileUuid_=std::make_shared<std::string>(r["file_uuid"].as<std::string>());
        }
        if(!r["source_file"].isNull())
        {
            sourceFile_=std::make_shared<std::string>(r["source_file"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            fileName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            fileType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            fileUuid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            sourceFile_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

TFile::TFile(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fileType_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            fileUuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            sourceFile_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

TFile::TFile(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("file_name"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["file_name"].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson["file_name"].asString());
        }
    }
    if(pJson.isMember("file_type"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["file_type"].isNull())
        {
            fileType_=std::make_shared<std::string>(pJson["file_type"].asString());
        }
    }
    if(pJson.isMember("file_uuid"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["file_uuid"].isNull())
        {
            fileUuid_=std::make_shared<std::string>(pJson["file_uuid"].asString());
        }
    }
    if(pJson.isMember("source_file"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["source_file"].isNull())
        {
            sourceFile_=std::make_shared<std::string>(pJson["source_file"].asString());
        }
    }
}

void TFile::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fileType_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            fileUuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            sourceFile_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

void TFile::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("file_name"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["file_name"].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson["file_name"].asString());
        }
    }
    if(pJson.isMember("file_type"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["file_type"].isNull())
        {
            fileType_=std::make_shared<std::string>(pJson["file_type"].asString());
        }
    }
    if(pJson.isMember("file_uuid"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["file_uuid"].isNull())
        {
            fileUuid_=std::make_shared<std::string>(pJson["file_uuid"].asString());
        }
    }
    if(pJson.isMember("source_file"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["source_file"].isNull())
        {
            sourceFile_=std::make_shared<std::string>(pJson["source_file"].asString());
        }
    }
}

const int32_t &TFile::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TFile::getId() const noexcept
{
    return id_;
}
void TFile::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename TFile::PrimaryKeyType & TFile::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int32_t &TFile::getValueOfUserId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TFile::getUserId() const noexcept
{
    return userId_;
}
void TFile::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[1] = true;
}

const ::trantor::Date &TFile::getValueOfCreateTime() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TFile::getCreateTime() const noexcept
{
    return createTime_;
}
void TFile::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[2] = true;
}
void TFile::setCreateTimeToNull() noexcept
{
    createTime_.reset();
    dirtyFlag_[2] = true;
}

const std::string &TFile::getValueOfFileName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(fileName_)
        return *fileName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TFile::getFileName() const noexcept
{
    return fileName_;
}
void TFile::setFileName(const std::string &pFileName) noexcept
{
    fileName_ = std::make_shared<std::string>(pFileName);
    dirtyFlag_[3] = true;
}
void TFile::setFileName(std::string &&pFileName) noexcept
{
    fileName_ = std::make_shared<std::string>(std::move(pFileName));
    dirtyFlag_[3] = true;
}

const std::string &TFile::getValueOfFileType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(fileType_)
        return *fileType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TFile::getFileType() const noexcept
{
    return fileType_;
}
void TFile::setFileType(const std::string &pFileType) noexcept
{
    fileType_ = std::make_shared<std::string>(pFileType);
    dirtyFlag_[4] = true;
}
void TFile::setFileType(std::string &&pFileType) noexcept
{
    fileType_ = std::make_shared<std::string>(std::move(pFileType));
    dirtyFlag_[4] = true;
}

const std::string &TFile::getValueOfFileUuid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(fileUuid_)
        return *fileUuid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TFile::getFileUuid() const noexcept
{
    return fileUuid_;
}
void TFile::setFileUuid(const std::string &pFileUuid) noexcept
{
    fileUuid_ = std::make_shared<std::string>(pFileUuid);
    dirtyFlag_[5] = true;
}
void TFile::setFileUuid(std::string &&pFileUuid) noexcept
{
    fileUuid_ = std::make_shared<std::string>(std::move(pFileUuid));
    dirtyFlag_[5] = true;
}

const std::string &TFile::getValueOfSourceFile() const noexcept
{
    static const std::string defaultValue = std::string();
    if(sourceFile_)
        return *sourceFile_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TFile::getSourceFile() const noexcept
{
    return sourceFile_;
}
void TFile::setSourceFile(const std::string &pSourceFile) noexcept
{
    sourceFile_ = std::make_shared<std::string>(pSourceFile);
    dirtyFlag_[6] = true;
}
void TFile::setSourceFile(std::string &&pSourceFile) noexcept
{
    sourceFile_ = std::make_shared<std::string>(std::move(pSourceFile));
    dirtyFlag_[6] = true;
}
void TFile::setSourceFileToNull() noexcept
{
    sourceFile_.reset();
    dirtyFlag_[6] = true;
}

void TFile::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &TFile::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "user_id",
        "create_time",
        "file_name",
        "file_type",
        "file_uuid",
        "source_file"
    };
    return inCols;
}

void TFile::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFileName())
        {
            binder << getValueOfFileName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFileType())
        {
            binder << getValueOfFileType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFileUuid())
        {
            binder << getValueOfFileUuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSourceFile())
        {
            binder << getValueOfSourceFile();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TFile::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void TFile::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFileName())
        {
            binder << getValueOfFileName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFileType())
        {
            binder << getValueOfFileType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFileUuid())
        {
            binder << getValueOfFileUuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSourceFile())
        {
            binder << getValueOfSourceFile();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TFile::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getFileName())
    {
        ret["file_name"]=getValueOfFileName();
    }
    else
    {
        ret["file_name"]=Json::Value();
    }
    if(getFileType())
    {
        ret["file_type"]=getValueOfFileType();
    }
    else
    {
        ret["file_type"]=Json::Value();
    }
    if(getFileUuid())
    {
        ret["file_uuid"]=getValueOfFileUuid();
    }
    else
    {
        ret["file_uuid"]=Json::Value();
    }
    if(getSourceFile())
    {
        ret["source_file"]=getValueOfSourceFile();
    }
    else
    {
        ret["source_file"]=Json::Value();
    }
    return ret;
}

Json::Value TFile::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[1]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[2]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getFileName())
            {
                ret[pMasqueradingVector[3]]=getValueOfFileName();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFileType())
            {
                ret[pMasqueradingVector[4]]=getValueOfFileType();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getFileUuid())
            {
                ret[pMasqueradingVector[5]]=getValueOfFileUuid();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getSourceFile())
            {
                ret[pMasqueradingVector[6]]=getValueOfSourceFile();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getFileName())
    {
        ret["file_name"]=getValueOfFileName();
    }
    else
    {
        ret["file_name"]=Json::Value();
    }
    if(getFileType())
    {
        ret["file_type"]=getValueOfFileType();
    }
    else
    {
        ret["file_type"]=Json::Value();
    }
    if(getFileUuid())
    {
        ret["file_uuid"]=getValueOfFileUuid();
    }
    else
    {
        ret["file_uuid"]=Json::Value();
    }
    if(getSourceFile())
    {
        ret["source_file"]=getValueOfSourceFile();
    }
    else
    {
        ret["source_file"]=Json::Value();
    }
    return ret;
}

bool TFile::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err="The user_id column cannot be null";
        return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(2, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("file_name"))
    {
        if(!validJsonOfField(3, "file_name", pJson["file_name"], err, true))
            return false;
    }
    else
    {
        err="The file_name column cannot be null";
        return false;
    }
    if(pJson.isMember("file_type"))
    {
        if(!validJsonOfField(4, "file_type", pJson["file_type"], err, true))
            return false;
    }
    else
    {
        err="The file_type column cannot be null";
        return false;
    }
    if(pJson.isMember("file_uuid"))
    {
        if(!validJsonOfField(5, "file_uuid", pJson["file_uuid"], err, true))
            return false;
    }
    else
    {
        err="The file_uuid column cannot be null";
        return false;
    }
    if(pJson.isMember("source_file"))
    {
        if(!validJsonOfField(6, "source_file", pJson["source_file"], err, true))
            return false;
    }
    return true;
}
bool TFile::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TFile::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(2, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("file_name"))
    {
        if(!validJsonOfField(3, "file_name", pJson["file_name"], err, false))
            return false;
    }
    if(pJson.isMember("file_type"))
    {
        if(!validJsonOfField(4, "file_type", pJson["file_type"], err, false))
            return false;
    }
    if(pJson.isMember("file_uuid"))
    {
        if(!validJsonOfField(5, "file_uuid", pJson["file_uuid"], err, false))
            return false;
    }
    if(pJson.isMember("source_file"))
    {
        if(!validJsonOfField(6, "source_file", pJson["source_file"], err, false))
            return false;
    }
    return true;
}
bool TFile::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TFile::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
